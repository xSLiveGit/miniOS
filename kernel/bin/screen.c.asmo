	.file	"screen.c"
	.intel_syntax noprefix
	.text
	.globl	ScrClearScreen
	.type	ScrClearScreen, @function
ScrClearScreen:
.LFB0:
	.cfi_startproc
	push	rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	mov	rbp, rsp
	.cfi_def_cfa_register 6
	sub	rsp, 16
	mov	QWORD PTR [rbp-8], 753664
	mov	WORD PTR [rbp-16], 0
	movzx	eax, BYTE PTR [rbp-15]
	and	eax, 15
	mov	BYTE PTR [rbp-15], al
	movzx	eax, BYTE PTR [rbp-15]
	and	eax, -16
	mov	BYTE PTR [rbp-15], al
	mov	BYTE PTR [rbp-16], 32
	mov	DWORD PTR [rbp-12], 0
	jmp	.L2
.L3:
	mov	rax, QWORD PTR [rbp-8]
	movzx	edx, WORD PTR [rbp-16]
	mov	WORD PTR [rax], dx
	add	QWORD PTR [rbp-8], 2
	add	DWORD PTR [rbp-12], 1
.L2:
	cmp	DWORD PTR [rbp-12], 1999
	jle	.L3
	leave
	.cfi_restore 6
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE0:
	.size	ScrClearScreen, .-ScrClearScreen
	.globl	ScrFlushScreenBufferOnScreen
	.type	ScrFlushScreenBufferOnScreen, @function
ScrFlushScreenBufferOnScreen:
.LFB1:
	.cfi_startproc
	push	rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	mov	rbp, rsp
	.cfi_def_cfa_register 6
	sub	rsp, 64
	mov	QWORD PTR [rbp+16], rcx
	mov	DWORD PTR [rbp-4], 0
	mov	QWORD PTR [rbp-16], 753664
	mov	rax, QWORD PTR [rbp+16]
	movzx	eax, WORD PTR [rax+4002]
	test	ax, ax
	jne	.L5
	jmp	.L4
.L5:
	mov	ecx, 0
	call	ScrClearScreen
	mov	rax, QWORD PTR [rbp+16]
	movzx	eax, WORD PTR [rax+4002]
	movzx	edx, ax
	mov	rax, QWORD PTR [rbp+16]
	movzx	eax, WORD PTR [rax+4000]
	movzx	eax, ax
	mov	ecx, eax
	call	ScrGetOffset
	mov	WORD PTR [rbp-18], ax
	mov	DWORD PTR [rbp-4], 0
	jmp	.L7
.L8:
	mov	rax, QWORD PTR [rbp-16]
	mov	rdx, QWORD PTR [rbp+16]
	mov	ecx, DWORD PTR [rbp-4]
	movsx	rcx, ecx
	movzx	edx, WORD PTR [rdx+rcx*2]
	mov	WORD PTR [rax], dx
	add	QWORD PTR [rbp-16], 2
	add	DWORD PTR [rbp-4], 1
.L7:
	movzx	eax, WORD PTR [rbp-18]
	cmp	eax, DWORD PTR [rbp-4]
	jg	.L8
.L4:
	leave
	.cfi_restore 6
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE1:
	.size	ScrFlushScreenBufferOnScreen, .-ScrFlushScreenBufferOnScreen
	.globl	ScrGetOffset
	.type	ScrGetOffset, @function
ScrGetOffset:
.LFB2:
	.cfi_startproc
	push	rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	mov	rbp, rsp
	.cfi_def_cfa_register 6
	mov	eax, edx
	mov	WORD PTR [rbp+16], cx
	mov	WORD PTR [rbp+24], ax
	movzx	edx, WORD PTR [rbp+16]
	mov	eax, edx
	sal	eax, 2
	add	eax, edx
	sal	eax, 4
	mov	edx, eax
	movzx	eax, WORD PTR [rbp+24]
	add	eax, edx
	pop	rbp
	.cfi_restore 6
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE2:
	.size	ScrGetOffset, .-ScrGetOffset
	.globl	ScrWriteInBuffer
	.type	ScrWriteInBuffer, @function
ScrWriteInBuffer:
.LFB3:
	.cfi_startproc
	push	rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	mov	rbp, rsp
	.cfi_def_cfa_register 6
	sub	rsp, 48
	mov	QWORD PTR [rbp+16], rcx
	mov	eax, edx
	mov	BYTE PTR [rbp+24], al
	mov	WORD PTR [rbp-16], 0
	mov	DWORD PTR [rbp-4], 0
	mov	rax, QWORD PTR [rbp+16]
	movzx	eax, WORD PTR [rax+4004]
	movzx	eax, ax
	lea	edx, [rax+1]
	mov	rax, QWORD PTR [rbp+16]
	movzx	eax, WORD PTR [rax+4002]
	movzx	eax, ax
	cmp	edx, eax
	cmovge	eax, edx
	mov	DWORD PTR [rbp-4], eax
	cmp	DWORD PTR [rbp-4], 79
	jle	.L12
	cmp	BYTE PTR [rbp+24], 10
	je	.L12
	mov	edx, 10
	mov	rcx, QWORD PTR [rbp+16]
	call	ScrWriteInBuffer
.L12:
	mov	rax, QWORD PTR [rbp+16]
	movzx	eax, WORD PTR [rax+4000]
	cmp	ax, 24
	jbe	.L13
	mov	rcx, QWORD PTR [rbp+16]
	call	ScrRemoveFirstLine
.L13:
	cmp	BYTE PTR [rbp+24], 10
	jne	.L14
	call	DebugBreak
	mov	rax, QWORD PTR [rbp+16]
	movzx	eax, WORD PTR [rax+4000]
	movzx	eax, ax
	add	eax, 1
	cmp	eax, 24
	jle	.L15
	mov	rcx, QWORD PTR [rbp+16]
	call	ScrRemoveFirstLine
.L15:
	mov	rax, QWORD PTR [rbp+16]
	movzx	eax, WORD PTR [rax+4000]
	lea	edx, [rax+1]
	mov	rax, QWORD PTR [rbp+16]
	mov	WORD PTR [rax+4000], dx
	mov	rax, QWORD PTR [rbp+16]
	mov	WORD PTR [rax+4004], 0
	mov	rax, QWORD PTR [rbp+16]
	mov	WORD PTR [rax+4002], 0
	mov	eax, 1
	jmp	.L18
.L14:
	movzx	eax, BYTE PTR [rbp-15]
	and	eax, 15
	mov	BYTE PTR [rbp-15], al
	movzx	eax, BYTE PTR [rbp-15]
	and	eax, -16
	or	eax, 2
	mov	BYTE PTR [rbp-15], al
	movzx	eax, BYTE PTR [rbp+24]
	mov	BYTE PTR [rbp-16], al
	mov	rax, QWORD PTR [rbp+16]
	movzx	eax, WORD PTR [rax+4004]
	movzx	edx, ax
	mov	rax, QWORD PTR [rbp+16]
	movzx	eax, WORD PTR [rax+4000]
	movzx	eax, ax
	mov	ecx, eax
	call	ScrGetOffset
	mov	WORD PTR [rbp-6], ax
	movzx	edx, WORD PTR [rbp-6]
	mov	rax, QWORD PTR [rbp+16]
	movsx	rdx, edx
	movzx	ecx, WORD PTR [rbp-16]
	mov	WORD PTR [rax+rdx*2], cx
	mov	rax, QWORD PTR [rbp+16]
	movzx	eax, WORD PTR [rax+4004]
	lea	edx, [rax+1]
	mov	rax, QWORD PTR [rbp+16]
	mov	WORD PTR [rax+4004], dx
	mov	rax, QWORD PTR [rbp+16]
	movzx	edx, WORD PTR [rax+4004]
	mov	rax, QWORD PTR [rbp+16]
	movzx	eax, WORD PTR [rax+4002]
	cmp	dx, ax
	jb	.L17
	mov	rax, QWORD PTR [rbp+16]
	movzx	eax, WORD PTR [rax+4002]
	lea	edx, [rax+1]
	mov	rax, QWORD PTR [rbp+16]
	mov	WORD PTR [rax+4002], dx
.L17:
	mov	eax, 1
.L18:
	leave
	.cfi_restore 6
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE3:
	.size	ScrWriteInBuffer, .-ScrWriteInBuffer
	.globl	ScrWriteOnScreen
	.type	ScrWriteOnScreen, @function
ScrWriteOnScreen:
.LFB4:
	.cfi_startproc
	push	rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	mov	rbp, rsp
	.cfi_def_cfa_register 6
	sub	rsp, 32
	mov	QWORD PTR [rbp+16], rcx
	mov	eax, edx
	mov	BYTE PTR [rbp+24], al
	movsx	eax, BYTE PTR [rbp+24]
	mov	edx, eax
	mov	rcx, QWORD PTR [rbp+16]
	call	ScrWriteInBuffer
	mov	rcx, QWORD PTR [rbp+16]
	call	ScrFlushScreenBufferOnScreen
	leave
	.cfi_restore 6
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE4:
	.size	ScrWriteOnScreen, .-ScrWriteOnScreen
	.globl	ScrRemoveFirstLine
	.type	ScrRemoveFirstLine, @function
ScrRemoveFirstLine:
.LFB5:
	.cfi_startproc
	push	rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	mov	rbp, rsp
	.cfi_def_cfa_register 6
	sub	rsp, 48
	mov	QWORD PTR [rbp+16], rcx
	mov	DWORD PTR [rbp-4], 0
	jmp	.L21
.L22:
	call	DebugBreak
	mov	eax, DWORD PTR [rbp-4]
	lea	r8d, [rax+80]
	mov	rax, QWORD PTR [rbp+16]
	mov	edx, DWORD PTR [rbp-4]
	movsx	rdx, edx
	mov	rcx, QWORD PTR [rbp+16]
	movsx	r8, r8d
	movzx	ecx, WORD PTR [rcx+r8*2]
	mov	WORD PTR [rax+rdx*2], cx
	add	DWORD PTR [rbp-4], 1
.L21:
	cmp	DWORD PTR [rbp-4], 79
	jle	.L22
	mov	rax, QWORD PTR [rbp+16]
	movzx	eax, WORD PTR [rax+4000]
	lea	edx, [rax-1]
	mov	rax, QWORD PTR [rbp+16]
	mov	WORD PTR [rax+4000], dx
	mov	rcx, QWORD PTR [rbp+16]
	call	ScrFlushScreenBufferOnScreen
	leave
	.cfi_restore 6
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE5:
	.size	ScrRemoveFirstLine, .-ScrRemoveFirstLine
	.ident	"GCC: (GNU) 4.9.0 20140309 (experimental)"
